package actions

import (
	"errors"
	"github.com/bopbi/travel_server/models"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Tour)
// DB Table: Plural (tours)
// Resource: Plural (Tours)
// Path: Plural (/tours)
// View Template Folder: Plural (/templates/tours/)

// ToursResource is the resource for the Tour model
type ToursResource struct {
	buffalo.Resource
}

// List gets all Tours. This function is mapped to the path
// GET /tours
func (v ToursResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	tours := &models.Tours{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Tours from the DB
	if err := q.All(tours); err != nil {
		return err
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, tours))
}

// Show gets the data for one Tour. This function is mapped to
// the path GET /tours/{tour_id}
func (v ToursResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty Tour
	tour := &models.Tour{}

	// To find the Tour the parameter tour_id is used.
	if err := tx.Find(tour, c.Param("tour_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, tour))
}

// New renders the form for creating a new Tour.
// This function is mapped to the path GET /tours/new
func (v ToursResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Tour{}))
}

// Create adds a Tour to the DB. This function is mapped to the
// path POST /tours
func (v ToursResource) Create(c buffalo.Context) error {
	// Allocate an empty Tour
	tour := &models.Tour{}

	// Bind tour to the html form elements
	if err := c.Bind(tour); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(tour)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, tour))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "tour.created.success"))
	// and redirect to the tours index page
	return c.Render(201, r.Auto(c, tour))
}

// Edit renders a edit form for a Tour. This function is
// mapped to the path GET /tours/{tour_id}/edit
func (v ToursResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty Tour
	tour := &models.Tour{}

	if err := tx.Find(tour, c.Param("tour_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, tour))
}

// Update changes a Tour in the DB. This function is mapped to
// the path PUT /tours/{tour_id}
func (v ToursResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty Tour
	tour := &models.Tour{}

	if err := tx.Find(tour, c.Param("tour_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Tour to the html form elements
	if err := c.Bind(tour); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(tour)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, tour))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "tour.updated.success"))
	// and redirect to the tours index page
	return c.Render(200, r.Auto(c, tour))
}

// Destroy deletes a Tour from the DB. This function is mapped
// to the path DELETE /tours/{tour_id}
func (v ToursResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.New("no transaction found")
	}

	// Allocate an empty Tour
	tour := &models.Tour{}

	// To find the Tour the parameter tour_id is used.
	if err := tx.Find(tour, c.Param("tour_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(tour); err != nil {
		return err
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", T.Translate(c, "tour.destroyed.success"))
	// Redirect to the tours index page
	return c.Render(200, r.Auto(c, tour))
}
